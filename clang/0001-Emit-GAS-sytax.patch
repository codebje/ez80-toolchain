From 8974d48fac9e60a84315bffd3992904b24397575 Mon Sep 17 00:00:00 2001
From: Byron Ellacott <code@bje.id.au>
Date: Mon, 1 Feb 2021 08:00:41 +1000
Subject: [PATCH] Emit GAS sytax

---
 .../Target/Z80/MCTargetDesc/Z80MCAsmInfo.cpp  | 64 ++++++++++---------
 .../Z80/MCTargetDesc/Z80TargetStreamer.cpp    | 10 +--
 llvm/lib/Target/Z80/Z80InstrInfo.td           |  4 +-
 3 files changed, 41 insertions(+), 37 deletions(-)

diff --git a/llvm/lib/Target/Z80/MCTargetDesc/Z80MCAsmInfo.cpp b/llvm/lib/Target/Z80/MCTargetDesc/Z80MCAsmInfo.cpp
index 9a8109b7b714..458fa87d5617 100644
--- a/llvm/lib/Target/Z80/MCTargetDesc/Z80MCAsmInfo.cpp
+++ b/llvm/lib/Target/Z80/MCTargetDesc/Z80MCAsmInfo.cpp
@@ -25,41 +25,45 @@ Z80MCAsmInfoELF::Z80MCAsmInfoELF(const Triple &T) {
   DollarIsPC = true;
   SeparatorString = nullptr;
   CommentString = ";";
-  PrivateGlobalPrefix = PrivateLabelPrefix = "";
-  Code16Directive = "assume\tadl = 0";
-  Code24Directive = "assume\tadl = 1";
+  //PrivateGlobalPrefix = PrivateLabelPrefix = "";
+  Code16Directive = ".assume\tadl = 0";
+  Code24Directive = ".assume\tadl = 1";
   Code32Directive = Code64Directive = nullptr;
   AssemblerDialect = !Is16Bit;
   SupportsQuotedNames = false;
-  ZeroDirective = AscizDirective = nullptr;
-  BlockSeparator = " dup ";
-  AsciiDirective = ByteListDirective = Data8bitsDirective = "\tdb\t";
+  ZeroDirective = "\tds\t";
+  //ZeroDirective =
+  AscizDirective = nullptr;
+  //BlockSeparator = " dup ";
+  AsciiDirective = nullptr;
+  ByteListDirective = "\tdb\t";
   OctalLiteralSyntax = AOLS_TrailingO;
-  CharacterLiteralSyntax = ACLS_SingleQuotes;
+  CharacterLiteralSyntax = ACLS_Unknown; //ACLS_SingleQuotePrefix; //ACLS_SingleQuotes;
   StringLiteralEscapeSyntax = ASLES_RepeatDelimiter;
+  Data8bitsDirective = "\tdb\t";
   Data16bitsDirective = "\tdw\t";
-  Data24bitsDirective = "\tdl\t";
-  Data32bitsDirective = "\tdd\t";
-  Data64bitsDirective = "\tdq\t";
-  DataULEB128Directive = "\tuleb128\t";
-  DataSLEB128Directive = "\tsleb128\t";
-  SectionDirective = "\tsection\t";
+  Data24bitsDirective = "\td24\t";
+  Data32bitsDirective = "\td32\t";
+  Data64bitsDirective = nullptr;//"\tdq\t";
+  DataULEB128Directive = "\t.uleb128\t";
+  DataSLEB128Directive = "\t.sleb128\t";
+  SectionDirective = "\t.section\t";
   AlwaysChangeSection = true;
-  GlobalDirective = "\tpublic\t";
-  LGloblDirective = "\tprivate\t";
-  SetDirective = "\tlabel\t";
-  SetSeparator = " at ";
-  HasFunctionAlignment = false;
-  HasDotTypeDotSizeDirective = false;
-  IdentDirective = "\tident\t";
-  WeakDirective = "\tweak\t";
+  GlobalDirective = "\t.global\t";
+  LGloblDirective = "\t.local\t";
+  //SetDirective = "\tlabel\t";
+  //SetSeparator = " at ";
+  //HasFunctionAlignment = false;
+  //HasDotTypeDotSizeDirective = false;
+  IdentDirective = "\t.ident\t";
+  WeakDirective = "\t.weak\t";
   UseIntegratedAssembler = false;
   UseLogicalShr = false;
-  HasSingleParameterDotFile = false;
+  //HasSingleParameterDotFile = false;
   SupportsDebugInformation = SupportsCFI = true;
-  ExceptionsType = ExceptionHandling::SjLj;
-  DwarfFileDirective = "\tfile\t";
-  DwarfLocDirective = "\tloc\t";
+  //ExceptionsType = ExceptionHandling::SjLj;
+  DwarfFileDirective = "\t.file\t";
+  DwarfLocDirective = "\t.loc\t";
   DwarfCFIDirectivePrefix = "\tcfi_";
 }
 
@@ -68,7 +72,7 @@ MCSection *Z80MCAsmInfoELF::getNonexecutableStackSection(MCContext &Ctx) const {
 }
 
 bool Z80MCAsmInfoELF::isAcceptableChar(char C) const {
-  return MCAsmInfo::isAcceptableChar(C) || C == '%' || C == '^';
+  return MCAsmInfo::isAcceptableChar(C);// || C == '%' || C == '^';
 }
 
 bool Z80MCAsmInfoELF::shouldOmitSectionDirective(StringRef SectionName) const {
@@ -78,9 +82,9 @@ bool Z80MCAsmInfoELF::shouldOmitSectionDirective(StringRef SectionName) const {
 const char *Z80MCAsmInfoELF::getBlockDirective(int64_t Size) const {
   switch (Size) {
   default: return nullptr;
-  case 1: return "\tdb\t";
-  case 2: return "\tdw\t";
-  case 3: return "\tdl\t";
-  case 4: return "\tdd\t";
+  case 1: return Data8bitsDirective;
+  case 2: return Data16bitsDirective;
+  case 3: return Data24bitsDirective;
+  case 4: return Data32bitsDirective;
   }
 }
diff --git a/llvm/lib/Target/Z80/MCTargetDesc/Z80TargetStreamer.cpp b/llvm/lib/Target/Z80/MCTargetDesc/Z80TargetStreamer.cpp
index 4ca0d9c5fa0f..350e1a18dc56 100644
--- a/llvm/lib/Target/Z80/MCTargetDesc/Z80TargetStreamer.cpp
+++ b/llvm/lib/Target/Z80/MCTargetDesc/Z80TargetStreamer.cpp
@@ -31,29 +31,29 @@ void Z80TargetAsmStreamer::emitLabel(MCSymbol *Symbol) {
 
 void Z80TargetAsmStreamer::emitAlign(Align Alignment) {
   if (auto Mask = Alignment.value() - 1)
-    OS << "\trb\t" << Mask << " - ($ - $$ + " << Mask << ") and not " << Mask
+    OS << "\tds\t" << Mask << " - ($ - $$ + " << Mask << ") and not " << Mask
        << "\n";
 }
 
 void Z80TargetAsmStreamer::emitBlock(uint64_t NumBytes) {
   if (NumBytes)
-    OS << "\trb\t" << NumBytes << '\n';
+    OS << "\tds\t" << NumBytes << '\n';
 }
 
 void Z80TargetAsmStreamer::emitLocal(MCSymbol *Symbol) {
-  OS << "\tprivate\t";
+  OS << "\t.local\t";
   Symbol->print(OS, MAI);
   OS << '\n';
 }
 
 void Z80TargetAsmStreamer::emitGlobal(MCSymbol *Symbol) {
-  OS << "\tpublic\t";
+  OS << "\t.global\t";
   Symbol->print(OS, MAI);
   OS << '\n';
 }
 
 void Z80TargetAsmStreamer::emitExtern(MCSymbol *Symbol) {
-  OS << "\textern\t";
+  OS << "\t.extern\t";
   Symbol->print(OS, MAI);
   OS << '\n';
 }
diff --git a/llvm/lib/Target/Z80/Z80InstrInfo.td b/llvm/lib/Target/Z80/Z80InstrInfo.td
index ad26337c2fe4..02d111d2123a 100644
--- a/llvm/lib/Target/Z80/Z80InstrInfo.td
+++ b/llvm/lib/Target/Z80/Z80InstrInfo.td
@@ -348,7 +348,7 @@ let isCall = 1, isTerminator = 1, isReturn = 1, isBarrier = 1 in {
 
 let isBranch = 1, isTerminator = 1 in {
   let isBarrier = 1 in {
-    def JQ : Pseudo<"jq", "\t$tgt", "", (outs), (ins jmptarget:$tgt),
+    def JQ : Pseudo<"jp", "\t$tgt", "", (outs), (ins jmptarget:$tgt),
                     [(br bb:$tgt)]>;
     def JR   : Io  <NoPre, 0x18, "jr", "\t$tgt", "",
                     (outs), (ins jmptargetoff:$tgt)>;
@@ -364,7 +364,7 @@ let isBranch = 1, isTerminator = 1 in {
     }
   }
   let Uses = [F] in {
-    def JQCC : Pseudo<"jq", "\t$cc, $tgt", "",
+    def JQCC : Pseudo<"jp", "\t$cc, $tgt", "",
                       (outs), (ins jmptarget:$tgt, cc:$cc),
                       [(Z80brcond bb:$tgt, imm:$cc, F)]>;
     def JRCC   : Io  <NoPre, 0x18, "jr", "\t$cc, $tgt", "",
-- 
2.28.0

