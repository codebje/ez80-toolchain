diff -urb A/llvm/lib/Target/Z80/MCTargetDesc/Z80MCAsmInfo.cpp B/llvm/lib/Target/Z80/MCTargetDesc/Z80MCAsmInfo.cpp
--- A/llvm/lib/Target/Z80/MCTargetDesc/Z80MCAsmInfo.cpp	2023-12-13 09:14:57
+++ B/llvm/lib/Target/Z80/MCTargetDesc/Z80MCAsmInfo.cpp	2023-12-15 21:17:43
@@ -33,44 +33,49 @@
   DollarIsPC = true;
   SeparatorString = nullptr;
   CommentString = ";";
-  PrivateGlobalPrefix = PrivateLabelPrefix = "";
-  Code16Directive = "assume\tadl = 0";
-  Code24Directive = "assume\tadl = 1";
+  //PrivateGlobalPrefix = PrivateLabelPrefix = "";
+  Code16Directive = ".assume\tadl = 0";
+  Code24Directive = ".assume\tadl = 1";
   Code32Directive = Code64Directive = nullptr;
   AssemblerDialect = !Is16Bit;
   SupportsQuotedNames = false;
-  ZeroDirective = AscizDirective = nullptr;
-  BlockSeparator = " dup ";
-  AsciiDirective = ByteListDirective = Data8bitsDirective = "\tdb\t";
+  ZeroDirective = "\tds\t";
+  //ZeroDirective = AscizDirective = nullptr;
+  //BlockSeparator = " dup ";
+  //AsciiDirective = ByteListDirective = Data8bitsDirective = "\tdb\t";
+  AscizDirective = nullptr;
+  AsciiDirective = nullptr;
+  ByteListDirective = "\tdb\t";
   NumberLiteralSyntax = ANLS_PlainDecimal;
-  CharacterLiteralSyntax = ACLS_SingleQuotes;
+  CharacterLiteralSyntax = ACLS_Unknown; // ACLS_SingleQuotes;
   HasPairedDoubleQuoteStringConstants = true;
   HasBackslashEscapesInStringConstants = false;
   StringConstantsEscapeNonPrint = EscapeNonPrint;
   StringConstantsRequiredEscapes = {"\n\r\32", 4}; // include null
+  Data8bitsDirective = "\tdb\t";
   Data16bitsDirective = "\tdw\t";
-  Data24bitsDirective = "\tdl\t";
-  Data32bitsDirective = "\tdd\t";
-  Data64bitsDirective = "\tdq\t";
-  DataULEB128Directive = "\tuleb128\t";
-  DataSLEB128Directive = "\tsleb128\t";
-  SectionDirective = "\tsection\t";
+  Data24bitsDirective = "\td24\t"; //"\tdl\t";
+  Data32bitsDirective = "\td32\t"; //"\tdd\t";
+  Data64bitsDirective = nullptr; //"\tdq\t";
+  DataULEB128Directive = "\t.uleb128\t";
+  DataSLEB128Directive = "\t.sleb128\t";
+  SectionDirective = "\t.section\t";
   AlwaysChangeSection = true;
-  GlobalDirective = "\tpublic\t";
-  LGloblDirective = "\tprivate\t";
-  SetDirective = "\tlabel\t";
-  SetSeparator = " at ";
-  HasFunctionAlignment = false;
-  HasDotTypeDotSizeDirective = false;
-  IdentDirective = "\tident\t";
-  WeakDirective = "\tweak\t";
+  GlobalDirective = "\t.global\t";
+  LGloblDirective = "\t.local\t";
+  //SetDirective = "\tlabel\t";
+  //SetSeparator = " at ";
+  //HasFunctionAlignment = false;
+  //HasDotTypeDotSizeDirective = false;
+  IdentDirective = "\t.ident\t";
+  WeakDirective = "\t.weak\t";
   UseIntegratedAssembler = false;
   UseLogicalShr = false;
-  HasSingleParameterDotFile = false;
+  //HasSingleParameterDotFile = false;
   SupportsDebugInformation = SupportsCFI = true;
-  ExceptionsType = ExceptionHandling::SjLj;
-  DwarfFileDirective = "\tfile\t";
-  DwarfLocDirective = "\tloc\t";
+  //ExceptionsType = ExceptionHandling::SjLj;
+  DwarfFileDirective = "\t.file\t";
+  DwarfLocDirective = "\t.loc\t";
   DwarfCFIDirectivePrefix = "\tcfi_";
 }
 
@@ -79,7 +84,7 @@
 }
 
 bool Z80MCAsmInfoELF::isAcceptableChar(char C) const {
-  return MCAsmInfo::isAcceptableChar(C) || C == '%' || C == '^';
+  return MCAsmInfo::isAcceptableChar(C);// || C == '%' || C == '^';
 }
 
 bool Z80MCAsmInfoELF::shouldOmitSectionDirective(StringRef SectionName) const {
@@ -89,10 +94,10 @@
 const char *Z80MCAsmInfoELF::getBlockDirective(int64_t Size) const {
   switch (Size) {
   default: return nullptr;
-  case 1: return "\tdb\t";
-  case 2: return "\tdw\t";
-  case 3: return "\tdl\t";
-  case 4: return "\tdd\t";
+  case 1: return Data8bitsDirective;
+  case 2: return Data16bitsDirective;
+  case 3: return Data24bitsDirective;
+  case 4: return Data32bitsDirective;
   }
 }
 
diff -urb A/llvm/lib/Target/Z80/MCTargetDesc/Z80TargetStreamer.cpp B/llvm/lib/Target/Z80/MCTargetDesc/Z80TargetStreamer.cpp
--- A/llvm/lib/Target/Z80/MCTargetDesc/Z80TargetStreamer.cpp	2023-12-13 09:14:57
+++ B/llvm/lib/Target/Z80/MCTargetDesc/Z80TargetStreamer.cpp	2023-12-15 20:51:47
@@ -32,16 +32,16 @@
 
 void Z80TargetAsmStreamer::emitAlign(Align Alignment) {
   if (auto Mask = Alignment.value() - 1)
-    OS << "\trb\t($$ - $) and " << Mask << '\n';
+    OS << "\tds\t($$ - $) and " << Mask << '\n';
 }
 
 void Z80TargetAsmStreamer::emitBlock(uint64_t NumBytes) {
   if (NumBytes)
-    OS << "\trb\t" << NumBytes << '\n';
+    OS << "\tds\t" << NumBytes << '\n';
 }
 
 void Z80TargetAsmStreamer::emitLocal(MCSymbol *Symbol) {
-  OS << "\tprivate\t";
+  OS << "\t.local\t";
   Symbol->print(OS, MAI);
   OS << '\n';
 }
@@ -53,13 +53,13 @@
 }
 
 void Z80TargetAsmStreamer::emitGlobal(MCSymbol *Symbol) {
-  OS << "\tpublic\t";
+  OS << "\t.global\t";
   Symbol->print(OS, MAI);
   OS << '\n';
 }
 
 void Z80TargetAsmStreamer::emitExtern(MCSymbol *Symbol) {
-  OS << "\textern\t";
+  OS << "\t.extern\t";
   Symbol->print(OS, MAI);
   OS << '\n';
 }
diff -urb A/llvm/lib/Target/Z80/Z80InstrInfo.td B/llvm/lib/Target/Z80/Z80InstrInfo.td
--- A/llvm/lib/Target/Z80/Z80InstrInfo.td	2023-12-13 09:14:57
+++ B/llvm/lib/Target/Z80/Z80InstrInfo.td	2023-12-15 20:47:42
@@ -378,7 +378,7 @@
 
 let isBranch = true, isTerminator = true in {
   let isBarrier = true in {
-    def JQ : Pseudo<"jq", "\t$tgt", "", (outs), (ins jmptarget:$tgt),
+    def JQ : Pseudo<"jp", "\t$tgt", "", (outs), (ins jmptarget:$tgt),
                     [(br bb:$tgt)]>;
     def JR   : Io  <  NoPre, 0x18, "jr", "\t$tgt", "",
                     (outs), (ins jmptargetoff:$tgt)>;
@@ -397,7 +397,7 @@
   def DJNZ : Io  <  NoPre, 0x10, "djnz", "\t$tgt", "",
                   (outs), (ins jmptargetoff:$tgt)>;
   let Uses = [F] in {
-    def JQCC : Pseudo<"jq", "\t$cc, $tgt", "",
+    def JQCC : Pseudo<"jp", "\t$cc, $tgt", "",
                       (outs), (ins jmptarget:$tgt, cc:$cc),
                       [(Z80brcond bb:$tgt, imm:$cc, F)]>;
     def JRCC   : Io  <  NoPre, 0x18, "jr", "\t$cc, $tgt", "",
